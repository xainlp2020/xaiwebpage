import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { Actions } from '@ngrx/effects';
import { filter, shareReplay } from 'rxjs/operators';
import { OP_ERROR } from '../actions/entity-op';
import { ofEntityType } from '../actions/entity-action-operators';
import { ENTITY_CACHE_SELECTOR_TOKEN, } from './entity-cache-selector';
/** Creates observable EntitySelectors$ for entity collections. */
var EntitySelectors$Factory = /** @class */ (function () {
    function EntitySelectors$Factory(store, actions, selectEntityCache) {
        this.store = store;
        this.actions = actions;
        this.selectEntityCache = selectEntityCache;
        // This service applies to the cache in ngrx/store named `cacheName`
        this.entityCache$ = this.store.select(this.selectEntityCache);
        this.entityActionErrors$ = actions.pipe(filter(function (ea) {
            return ea.payload &&
                ea.payload.entityOp &&
                ea.payload.entityOp.endsWith(OP_ERROR);
        }), shareReplay(1));
    }
    /**
     * Creates an entity collection's selectors$ observables for this factory's store.
     * `selectors$` are observable selectors of the cached entity collection.
     * @param entityName - is also the name of the collection.
     * @param selectors - selector functions for this collection.
     **/
    EntitySelectors$Factory.prototype.create = function (entityName, selectors) {
        var _this = this;
        var selectors$ = {
            entityName: entityName,
        };
        Object.keys(selectors).forEach(function (name) {
            if (name.startsWith('select')) {
                // strip 'select' prefix from the selector fn name and append `$`
                // Ex: 'selectEntities' => 'entities$'
                var name$ = name[6].toLowerCase() + name.substr(7) + '$';
                selectors$[name$] = _this.store.select(selectors[name]);
            }
        });
        selectors$.entityActions$ = this.actions.pipe(ofEntityType(entityName));
        selectors$.errors$ = this.entityActionErrors$.pipe(ofEntityType(entityName));
        return selectors$;
    };
    EntitySelectors$Factory = __decorate([
        Injectable(),
        __param(2, Inject(ENTITY_CACHE_SELECTOR_TOKEN)),
        __metadata("design:paramtypes", [Store,
            Actions, Function])
    ], EntitySelectors$Factory);
    return EntitySelectors$Factory;
}());
export { EntitySelectors$Factory };
//# sourceMappingURL=data:application/json;base64,