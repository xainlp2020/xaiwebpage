import { ModuleWithProviders, Injector, InjectionToken, OnDestroy } from '@angular/core';
import { Action, MetaReducer, ReducerManager } from '@ngrx/store';
import { EntityAction } from './actions/entity-action';
import { EntityCache } from './reducers/entity-cache';
import { EntityCollection } from './reducers/entity-collection';
import { EntityMetadataMap } from './entity-metadata/entity-metadata';
import { EntityCacheReducerFactory } from './reducers/entity-cache-reducer';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngrx/store';
export interface EntityDataModuleConfig {
    entityMetadata?: EntityMetadataMap;
    entityCacheMetaReducers?: (MetaReducer<EntityCache, Action> | InjectionToken<MetaReducer<EntityCache, Action>>)[];
    entityCollectionMetaReducers?: MetaReducer<EntityCollection, EntityAction>[];
    initialEntityCacheState?: EntityCache | (() => EntityCache);
    pluralNames?: {
        [name: string]: string;
    };
}
/**
 * Module without effects or dataservices which means no HTTP calls
 * This module helpful for internal testing.
 * Also helpful for apps that handle server access on their own and
 * therefore opt-out of @ngrx/effects for entities
 */
export declare class EntityDataModuleWithoutEffects implements OnDestroy {
    private reducerManager;
    private injector;
    private entityCacheName;
    private initialState;
    private metaReducers;
    private entityCacheFeature;
    static forRoot(config: EntityDataModuleConfig): ModuleWithProviders<EntityDataModuleWithoutEffects>;
    constructor(reducerManager: ReducerManager, entityCacheReducerFactory: EntityCacheReducerFactory, injector: Injector, entityCacheName: string, initialState: any, metaReducers: (MetaReducer<EntityCache, Action> | InjectionToken<MetaReducer<EntityCache, Action>>)[]);
    ngOnDestroy(): void;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<EntityDataModuleWithoutEffects, never, [typeof ɵngcc1.StoreModule], never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<EntityDataModuleWithoutEffects>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWRhdGEtd2l0aG91dC1lZmZlY3RzLm1vZHVsZS5kLnRzIiwic291cmNlcyI6WyJlbnRpdHktZGF0YS13aXRob3V0LWVmZmVjdHMubW9kdWxlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIEluamVjdG9yLCBJbmplY3Rpb25Ub2tlbiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb24sIE1ldGFSZWR1Y2VyLCBSZWR1Y2VyTWFuYWdlciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IEVudGl0eUFjdGlvbiB9IGZyb20gJy4vYWN0aW9ucy9lbnRpdHktYWN0aW9uJztcbmltcG9ydCB7IEVudGl0eUNhY2hlIH0gZnJvbSAnLi9yZWR1Y2Vycy9lbnRpdHktY2FjaGUnO1xuaW1wb3J0IHsgRW50aXR5Q29sbGVjdGlvbiB9IGZyb20gJy4vcmVkdWNlcnMvZW50aXR5LWNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgRW50aXR5TWV0YWRhdGFNYXAgfSBmcm9tICcuL2VudGl0eS1tZXRhZGF0YS9lbnRpdHktbWV0YWRhdGEnO1xuaW1wb3J0IHsgRW50aXR5Q2FjaGVSZWR1Y2VyRmFjdG9yeSB9IGZyb20gJy4vcmVkdWNlcnMvZW50aXR5LWNhY2hlLXJlZHVjZXInO1xuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlEYXRhTW9kdWxlQ29uZmlnIHtcbiAgICBlbnRpdHlNZXRhZGF0YT86IEVudGl0eU1ldGFkYXRhTWFwO1xuICAgIGVudGl0eUNhY2hlTWV0YVJlZHVjZXJzPzogKE1ldGFSZWR1Y2VyPEVudGl0eUNhY2hlLCBBY3Rpb24+IHwgSW5qZWN0aW9uVG9rZW48TWV0YVJlZHVjZXI8RW50aXR5Q2FjaGUsIEFjdGlvbj4+KVtdO1xuICAgIGVudGl0eUNvbGxlY3Rpb25NZXRhUmVkdWNlcnM/OiBNZXRhUmVkdWNlcjxFbnRpdHlDb2xsZWN0aW9uLCBFbnRpdHlBY3Rpb24+W107XG4gICAgaW5pdGlhbEVudGl0eUNhY2hlU3RhdGU/OiBFbnRpdHlDYWNoZSB8ICgoKSA9PiBFbnRpdHlDYWNoZSk7XG4gICAgcGx1cmFsTmFtZXM/OiB7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcbn1cbi8qKlxuICogTW9kdWxlIHdpdGhvdXQgZWZmZWN0cyBvciBkYXRhc2VydmljZXMgd2hpY2ggbWVhbnMgbm8gSFRUUCBjYWxsc1xuICogVGhpcyBtb2R1bGUgaGVscGZ1bCBmb3IgaW50ZXJuYWwgdGVzdGluZy5cbiAqIEFsc28gaGVscGZ1bCBmb3IgYXBwcyB0aGF0IGhhbmRsZSBzZXJ2ZXIgYWNjZXNzIG9uIHRoZWlyIG93biBhbmRcbiAqIHRoZXJlZm9yZSBvcHQtb3V0IG9mIEBuZ3J4L2VmZmVjdHMgZm9yIGVudGl0aWVzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEVudGl0eURhdGFNb2R1bGVXaXRob3V0RWZmZWN0cyBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSByZWR1Y2VyTWFuYWdlcjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIHByaXZhdGUgZW50aXR5Q2FjaGVOYW1lO1xuICAgIHByaXZhdGUgaW5pdGlhbFN0YXRlO1xuICAgIHByaXZhdGUgbWV0YVJlZHVjZXJzO1xuICAgIHByaXZhdGUgZW50aXR5Q2FjaGVGZWF0dXJlO1xuICAgIHN0YXRpYyBmb3JSb290KGNvbmZpZzogRW50aXR5RGF0YU1vZHVsZUNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8RW50aXR5RGF0YU1vZHVsZVdpdGhvdXRFZmZlY3RzPjtcbiAgICBjb25zdHJ1Y3RvcihyZWR1Y2VyTWFuYWdlcjogUmVkdWNlck1hbmFnZXIsIGVudGl0eUNhY2hlUmVkdWNlckZhY3Rvcnk6IEVudGl0eUNhY2hlUmVkdWNlckZhY3RvcnksIGluamVjdG9yOiBJbmplY3RvciwgZW50aXR5Q2FjaGVOYW1lOiBzdHJpbmcsIGluaXRpYWxTdGF0ZTogYW55LCBtZXRhUmVkdWNlcnM6IChNZXRhUmVkdWNlcjxFbnRpdHlDYWNoZSwgQWN0aW9uPiB8IEluamVjdGlvblRva2VuPE1ldGFSZWR1Y2VyPEVudGl0eUNhY2hlLCBBY3Rpb24+PilbXSk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==