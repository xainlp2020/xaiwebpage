import { EntityOp } from './entity-op';
import { EntityAction, EntityActionOptions, EntityActionPayload } from './entity-action';
import * as ɵngcc0 from '@angular/core';
export declare class EntityActionFactory {
    /**
     * Create an EntityAction to perform an operation (op) for a particular entity type
     * (entityName) with optional data and other optional flags
     * @param entityName Name of the entity type
     * @param entityOp Operation to perform (EntityOp)
     * @param [data] data for the operation
     * @param [options] additional options
     */
    create<P = any>(entityName: string, entityOp: EntityOp, data?: P, options?: EntityActionOptions): EntityAction<P>;
    /**
     * Create an EntityAction to perform an operation (op) for a particular entity type
     * (entityName) with optional data and other optional flags
     * @param payload Defines the EntityAction and its options
     */
    create<P = any>(payload: EntityActionPayload<P>): EntityAction<P>;
    /**
     * Create an EntityAction to perform an operation (op) for a particular entity type
     * (entityName) with optional data and other optional flags
     * @param payload Defines the EntityAction and its options
     */
    protected createCore<P = any>(payload: EntityActionPayload<P>): {
        type: string;
        payload: EntityActionPayload<P>;
    };
    /**
     * Create an EntityAction from another EntityAction, replacing properties with those from newPayload;
     * @param from Source action that is the base for the new action
     * @param newProperties New EntityAction properties that replace the source action properties
     */
    createFromAction<P = any>(from: EntityAction, newProperties: Partial<EntityActionPayload<P>>): EntityAction<P>;
    formatActionType(op: string, tag: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EntityActionFactory, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<EntityActionFactory>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWFjdGlvbi1mYWN0b3J5LmQudHMiLCJzb3VyY2VzIjpbImVudGl0eS1hY3Rpb24tZmFjdG9yeS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHlPcCB9IGZyb20gJy4vZW50aXR5LW9wJztcbmltcG9ydCB7IEVudGl0eUFjdGlvbiwgRW50aXR5QWN0aW9uT3B0aW9ucywgRW50aXR5QWN0aW9uUGF5bG9hZCB9IGZyb20gJy4vZW50aXR5LWFjdGlvbic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBFbnRpdHlBY3Rpb25GYWN0b3J5IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gRW50aXR5QWN0aW9uIHRvIHBlcmZvcm0gYW4gb3BlcmF0aW9uIChvcCkgZm9yIGEgcGFydGljdWxhciBlbnRpdHkgdHlwZVxuICAgICAqIChlbnRpdHlOYW1lKSB3aXRoIG9wdGlvbmFsIGRhdGEgYW5kIG90aGVyIG9wdGlvbmFsIGZsYWdzXG4gICAgICogQHBhcmFtIGVudGl0eU5hbWUgTmFtZSBvZiB0aGUgZW50aXR5IHR5cGVcbiAgICAgKiBAcGFyYW0gZW50aXR5T3AgT3BlcmF0aW9uIHRvIHBlcmZvcm0gKEVudGl0eU9wKVxuICAgICAqIEBwYXJhbSBbZGF0YV0gZGF0YSBmb3IgdGhlIG9wZXJhdGlvblxuICAgICAqIEBwYXJhbSBbb3B0aW9uc10gYWRkaXRpb25hbCBvcHRpb25zXG4gICAgICovXG4gICAgY3JlYXRlPFAgPSBhbnk+KGVudGl0eU5hbWU6IHN0cmluZywgZW50aXR5T3A6IEVudGl0eU9wLCBkYXRhPzogUCwgb3B0aW9ucz86IEVudGl0eUFjdGlvbk9wdGlvbnMpOiBFbnRpdHlBY3Rpb248UD47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIEVudGl0eUFjdGlvbiB0byBwZXJmb3JtIGFuIG9wZXJhdGlvbiAob3ApIGZvciBhIHBhcnRpY3VsYXIgZW50aXR5IHR5cGVcbiAgICAgKiAoZW50aXR5TmFtZSkgd2l0aCBvcHRpb25hbCBkYXRhIGFuZCBvdGhlciBvcHRpb25hbCBmbGFnc1xuICAgICAqIEBwYXJhbSBwYXlsb2FkIERlZmluZXMgdGhlIEVudGl0eUFjdGlvbiBhbmQgaXRzIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjcmVhdGU8UCA9IGFueT4ocGF5bG9hZDogRW50aXR5QWN0aW9uUGF5bG9hZDxQPik6IEVudGl0eUFjdGlvbjxQPjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gRW50aXR5QWN0aW9uIHRvIHBlcmZvcm0gYW4gb3BlcmF0aW9uIChvcCkgZm9yIGEgcGFydGljdWxhciBlbnRpdHkgdHlwZVxuICAgICAqIChlbnRpdHlOYW1lKSB3aXRoIG9wdGlvbmFsIGRhdGEgYW5kIG90aGVyIG9wdGlvbmFsIGZsYWdzXG4gICAgICogQHBhcmFtIHBheWxvYWQgRGVmaW5lcyB0aGUgRW50aXR5QWN0aW9uIGFuZCBpdHMgb3B0aW9uc1xuICAgICAqL1xuICAgIHByb3RlY3RlZCBjcmVhdGVDb3JlPFAgPSBhbnk+KHBheWxvYWQ6IEVudGl0eUFjdGlvblBheWxvYWQ8UD4pOiB7XG4gICAgICAgIHR5cGU6IHN0cmluZztcbiAgICAgICAgcGF5bG9hZDogRW50aXR5QWN0aW9uUGF5bG9hZDxQPjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBFbnRpdHlBY3Rpb24gZnJvbSBhbm90aGVyIEVudGl0eUFjdGlvbiwgcmVwbGFjaW5nIHByb3BlcnRpZXMgd2l0aCB0aG9zZSBmcm9tIG5ld1BheWxvYWQ7XG4gICAgICogQHBhcmFtIGZyb20gU291cmNlIGFjdGlvbiB0aGF0IGlzIHRoZSBiYXNlIGZvciB0aGUgbmV3IGFjdGlvblxuICAgICAqIEBwYXJhbSBuZXdQcm9wZXJ0aWVzIE5ldyBFbnRpdHlBY3Rpb24gcHJvcGVydGllcyB0aGF0IHJlcGxhY2UgdGhlIHNvdXJjZSBhY3Rpb24gcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNyZWF0ZUZyb21BY3Rpb248UCA9IGFueT4oZnJvbTogRW50aXR5QWN0aW9uLCBuZXdQcm9wZXJ0aWVzOiBQYXJ0aWFsPEVudGl0eUFjdGlvblBheWxvYWQ8UD4+KTogRW50aXR5QWN0aW9uPFA+O1xuICAgIGZvcm1hdEFjdGlvblR5cGUob3A6IHN0cmluZywgdGFnOiBzdHJpbmcpOiBzdHJpbmc7XG59XG4iXX0=