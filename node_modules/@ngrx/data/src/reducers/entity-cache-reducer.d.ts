import { Action, ActionReducer } from '@ngrx/store';
import { EntityCache } from './entity-cache';
import { ClearCollections, LoadCollections, MergeQuerySet, SaveEntities, SaveEntitiesCancel, SaveEntitiesError, SaveEntitiesSuccess } from '../actions/entity-cache-action';
import { EntityCollectionCreator } from './entity-collection-creator';
import { EntityCollectionReducerRegistry } from './entity-collection-reducer-registry';
import { Logger } from '../utils/interfaces';
/**
 * Creates the EntityCacheReducer via its create() method
 */
import * as ɵngcc0 from '@angular/core';
export declare class EntityCacheReducerFactory {
    private entityCollectionCreator;
    private entityCollectionReducerRegistry;
    private logger;
    constructor(entityCollectionCreator: EntityCollectionCreator, entityCollectionReducerRegistry: EntityCollectionReducerRegistry, logger: Logger);
    /**
     * Create the @ngrx/data entity cache reducer which either responds to entity cache level actions
     * or (more commonly) delegates to an EntityCollectionReducer based on the action.payload.entityName.
     */
    create(): ActionReducer<EntityCache, Action>;
    /**
     * Reducer to clear multiple collections at the same time.
     * @param entityCache the entity cache
     * @param action a ClearCollections action whose payload is an array of collection names.
     * If empty array, does nothing. If no array, clears all the collections.
     */
    protected clearCollectionsReducer(entityCache: EntityCache, action: ClearCollections): EntityCache;
    /**
     * Reducer to load collection in the form of a hash of entity data for multiple collections.
     * @param entityCache the entity cache
     * @param action a LoadCollections action whose payload is the QuerySet of entity collections to load
     */
    protected loadCollectionsReducer(entityCache: EntityCache, action: LoadCollections): EntityCache;
    /**
     * Reducer to merge query sets in the form of a hash of entity data for multiple collections.
     * @param entityCache the entity cache
     * @param action a MergeQuerySet action with the query set and a MergeStrategy
     */
    protected mergeQuerySetReducer(entityCache: EntityCache, action: MergeQuerySet): EntityCache;
    protected saveEntitiesReducer(entityCache: EntityCache, action: SaveEntities): EntityCache;
    protected saveEntitiesCancelReducer(entityCache: EntityCache, action: SaveEntitiesCancel): EntityCache;
    protected saveEntitiesErrorReducer(entityCache: EntityCache, action: SaveEntitiesError): EntityCache;
    protected saveEntitiesSuccessReducer(entityCache: EntityCache, action: SaveEntitiesSuccess): EntityCache;
    /** Apply reducer for the action's EntityCollection (if the action targets a collection) */
    private applyCollectionReducer;
    /** Ensure loading is false for every collection in entityNames */
    private clearLoadingFlags;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EntityCacheReducerFactory, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<EntityCacheReducerFactory>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWNhY2hlLXJlZHVjZXIuZC50cyIsInNvdXJjZXMiOlsiZW50aXR5LWNhY2hlLXJlZHVjZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25SZWR1Y2VyIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgRW50aXR5Q2FjaGUgfSBmcm9tICcuL2VudGl0eS1jYWNoZSc7XG5pbXBvcnQgeyBDbGVhckNvbGxlY3Rpb25zLCBMb2FkQ29sbGVjdGlvbnMsIE1lcmdlUXVlcnlTZXQsIFNhdmVFbnRpdGllcywgU2F2ZUVudGl0aWVzQ2FuY2VsLCBTYXZlRW50aXRpZXNFcnJvciwgU2F2ZUVudGl0aWVzU3VjY2VzcyB9IGZyb20gJy4uL2FjdGlvbnMvZW50aXR5LWNhY2hlLWFjdGlvbic7XG5pbXBvcnQgeyBFbnRpdHlDb2xsZWN0aW9uQ3JlYXRvciB9IGZyb20gJy4vZW50aXR5LWNvbGxlY3Rpb24tY3JlYXRvcic7XG5pbXBvcnQgeyBFbnRpdHlDb2xsZWN0aW9uUmVkdWNlclJlZ2lzdHJ5IH0gZnJvbSAnLi9lbnRpdHktY29sbGVjdGlvbi1yZWR1Y2VyLXJlZ2lzdHJ5JztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL3V0aWxzL2ludGVyZmFjZXMnO1xuLyoqXG4gKiBDcmVhdGVzIHRoZSBFbnRpdHlDYWNoZVJlZHVjZXIgdmlhIGl0cyBjcmVhdGUoKSBtZXRob2RcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRW50aXR5Q2FjaGVSZWR1Y2VyRmFjdG9yeSB7XG4gICAgcHJpdmF0ZSBlbnRpdHlDb2xsZWN0aW9uQ3JlYXRvcjtcbiAgICBwcml2YXRlIGVudGl0eUNvbGxlY3Rpb25SZWR1Y2VyUmVnaXN0cnk7XG4gICAgcHJpdmF0ZSBsb2dnZXI7XG4gICAgY29uc3RydWN0b3IoZW50aXR5Q29sbGVjdGlvbkNyZWF0b3I6IEVudGl0eUNvbGxlY3Rpb25DcmVhdG9yLCBlbnRpdHlDb2xsZWN0aW9uUmVkdWNlclJlZ2lzdHJ5OiBFbnRpdHlDb2xsZWN0aW9uUmVkdWNlclJlZ2lzdHJ5LCBsb2dnZXI6IExvZ2dlcik7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSBAbmdyeC9kYXRhIGVudGl0eSBjYWNoZSByZWR1Y2VyIHdoaWNoIGVpdGhlciByZXNwb25kcyB0byBlbnRpdHkgY2FjaGUgbGV2ZWwgYWN0aW9uc1xuICAgICAqIG9yIChtb3JlIGNvbW1vbmx5KSBkZWxlZ2F0ZXMgdG8gYW4gRW50aXR5Q29sbGVjdGlvblJlZHVjZXIgYmFzZWQgb24gdGhlIGFjdGlvbi5wYXlsb2FkLmVudGl0eU5hbWUuXG4gICAgICovXG4gICAgY3JlYXRlKCk6IEFjdGlvblJlZHVjZXI8RW50aXR5Q2FjaGUsIEFjdGlvbj47XG4gICAgLyoqXG4gICAgICogUmVkdWNlciB0byBjbGVhciBtdWx0aXBsZSBjb2xsZWN0aW9ucyBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAqIEBwYXJhbSBlbnRpdHlDYWNoZSB0aGUgZW50aXR5IGNhY2hlXG4gICAgICogQHBhcmFtIGFjdGlvbiBhIENsZWFyQ29sbGVjdGlvbnMgYWN0aW9uIHdob3NlIHBheWxvYWQgaXMgYW4gYXJyYXkgb2YgY29sbGVjdGlvbiBuYW1lcy5cbiAgICAgKiBJZiBlbXB0eSBhcnJheSwgZG9lcyBub3RoaW5nLiBJZiBubyBhcnJheSwgY2xlYXJzIGFsbCB0aGUgY29sbGVjdGlvbnMuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNsZWFyQ29sbGVjdGlvbnNSZWR1Y2VyKGVudGl0eUNhY2hlOiBFbnRpdHlDYWNoZSwgYWN0aW9uOiBDbGVhckNvbGxlY3Rpb25zKTogRW50aXR5Q2FjaGU7XG4gICAgLyoqXG4gICAgICogUmVkdWNlciB0byBsb2FkIGNvbGxlY3Rpb24gaW4gdGhlIGZvcm0gb2YgYSBoYXNoIG9mIGVudGl0eSBkYXRhIGZvciBtdWx0aXBsZSBjb2xsZWN0aW9ucy5cbiAgICAgKiBAcGFyYW0gZW50aXR5Q2FjaGUgdGhlIGVudGl0eSBjYWNoZVxuICAgICAqIEBwYXJhbSBhY3Rpb24gYSBMb2FkQ29sbGVjdGlvbnMgYWN0aW9uIHdob3NlIHBheWxvYWQgaXMgdGhlIFF1ZXJ5U2V0IG9mIGVudGl0eSBjb2xsZWN0aW9ucyB0byBsb2FkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGxvYWRDb2xsZWN0aW9uc1JlZHVjZXIoZW50aXR5Q2FjaGU6IEVudGl0eUNhY2hlLCBhY3Rpb246IExvYWRDb2xsZWN0aW9ucyk6IEVudGl0eUNhY2hlO1xuICAgIC8qKlxuICAgICAqIFJlZHVjZXIgdG8gbWVyZ2UgcXVlcnkgc2V0cyBpbiB0aGUgZm9ybSBvZiBhIGhhc2ggb2YgZW50aXR5IGRhdGEgZm9yIG11bHRpcGxlIGNvbGxlY3Rpb25zLlxuICAgICAqIEBwYXJhbSBlbnRpdHlDYWNoZSB0aGUgZW50aXR5IGNhY2hlXG4gICAgICogQHBhcmFtIGFjdGlvbiBhIE1lcmdlUXVlcnlTZXQgYWN0aW9uIHdpdGggdGhlIHF1ZXJ5IHNldCBhbmQgYSBNZXJnZVN0cmF0ZWd5XG4gICAgICovXG4gICAgcHJvdGVjdGVkIG1lcmdlUXVlcnlTZXRSZWR1Y2VyKGVudGl0eUNhY2hlOiBFbnRpdHlDYWNoZSwgYWN0aW9uOiBNZXJnZVF1ZXJ5U2V0KTogRW50aXR5Q2FjaGU7XG4gICAgcHJvdGVjdGVkIHNhdmVFbnRpdGllc1JlZHVjZXIoZW50aXR5Q2FjaGU6IEVudGl0eUNhY2hlLCBhY3Rpb246IFNhdmVFbnRpdGllcyk6IEVudGl0eUNhY2hlO1xuICAgIHByb3RlY3RlZCBzYXZlRW50aXRpZXNDYW5jZWxSZWR1Y2VyKGVudGl0eUNhY2hlOiBFbnRpdHlDYWNoZSwgYWN0aW9uOiBTYXZlRW50aXRpZXNDYW5jZWwpOiBFbnRpdHlDYWNoZTtcbiAgICBwcm90ZWN0ZWQgc2F2ZUVudGl0aWVzRXJyb3JSZWR1Y2VyKGVudGl0eUNhY2hlOiBFbnRpdHlDYWNoZSwgYWN0aW9uOiBTYXZlRW50aXRpZXNFcnJvcik6IEVudGl0eUNhY2hlO1xuICAgIHByb3RlY3RlZCBzYXZlRW50aXRpZXNTdWNjZXNzUmVkdWNlcihlbnRpdHlDYWNoZTogRW50aXR5Q2FjaGUsIGFjdGlvbjogU2F2ZUVudGl0aWVzU3VjY2Vzcyk6IEVudGl0eUNhY2hlO1xuICAgIC8qKiBBcHBseSByZWR1Y2VyIGZvciB0aGUgYWN0aW9uJ3MgRW50aXR5Q29sbGVjdGlvbiAoaWYgdGhlIGFjdGlvbiB0YXJnZXRzIGEgY29sbGVjdGlvbikgKi9cbiAgICBwcml2YXRlIGFwcGx5Q29sbGVjdGlvblJlZHVjZXI7XG4gICAgLyoqIEVuc3VyZSBsb2FkaW5nIGlzIGZhbHNlIGZvciBldmVyeSBjb2xsZWN0aW9uIGluIGVudGl0eU5hbWVzICovXG4gICAgcHJpdmF0ZSBjbGVhckxvYWRpbmdGbGFncztcbn1cbiJdfQ==