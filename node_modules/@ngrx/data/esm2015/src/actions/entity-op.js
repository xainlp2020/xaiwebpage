/**
 * @fileoverview added by tsickle
 * Generated from: modules/data/src/actions/entity-op.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Ensure that these suffix values and the EntityOp suffixes match
// Cannot do that programmatically.
/** @enum {string} */
const EntityOp = {
    // Persistance operations
    CANCEL_PERSIST: "@ngrx/data/cancel-persist",
    CANCELED_PERSIST: "@ngrx/data/canceled-persist",
    QUERY_ALL: "@ngrx/data/query-all",
    QUERY_ALL_SUCCESS: "@ngrx/data/query-all/success",
    QUERY_ALL_ERROR: "@ngrx/data/query-all/error",
    QUERY_LOAD: "@ngrx/data/query-load",
    QUERY_LOAD_SUCCESS: "@ngrx/data/query-load/success",
    QUERY_LOAD_ERROR: "@ngrx/data/query-load/error",
    QUERY_MANY: "@ngrx/data/query-many",
    QUERY_MANY_SUCCESS: "@ngrx/data/query-many/success",
    QUERY_MANY_ERROR: "@ngrx/data/query-many/error",
    QUERY_BY_KEY: "@ngrx/data/query-by-key",
    QUERY_BY_KEY_SUCCESS: "@ngrx/data/query-by-key/success",
    QUERY_BY_KEY_ERROR: "@ngrx/data/query-by-key/error",
    SAVE_ADD_MANY: "@ngrx/data/save/add-many",
    SAVE_ADD_MANY_ERROR: "@ngrx/data/save/add-many/error",
    SAVE_ADD_MANY_SUCCESS: "@ngrx/data/save/add-many/success",
    SAVE_ADD_ONE: "@ngrx/data/save/add-one",
    SAVE_ADD_ONE_ERROR: "@ngrx/data/save/add-one/error",
    SAVE_ADD_ONE_SUCCESS: "@ngrx/data/save/add-one/success",
    SAVE_DELETE_MANY: "@ngrx/data/save/delete-many",
    SAVE_DELETE_MANY_SUCCESS: "@ngrx/data/save/delete-many/success",
    SAVE_DELETE_MANY_ERROR: "@ngrx/data/save/delete-many/error",
    SAVE_DELETE_ONE: "@ngrx/data/save/delete-one",
    SAVE_DELETE_ONE_SUCCESS: "@ngrx/data/save/delete-one/success",
    SAVE_DELETE_ONE_ERROR: "@ngrx/data/save/delete-one/error",
    SAVE_UPDATE_MANY: "@ngrx/data/save/update-many",
    SAVE_UPDATE_MANY_SUCCESS: "@ngrx/data/save/update-many/success",
    SAVE_UPDATE_MANY_ERROR: "@ngrx/data/save/update-many/error",
    SAVE_UPDATE_ONE: "@ngrx/data/save/update-one",
    SAVE_UPDATE_ONE_SUCCESS: "@ngrx/data/save/update-one/success",
    SAVE_UPDATE_ONE_ERROR: "@ngrx/data/save/update-one/error",
    // Use only if the server supports upsert;
    SAVE_UPSERT_MANY: "@ngrx/data/save/upsert-many",
    SAVE_UPSERT_MANY_SUCCESS: "@ngrx/data/save/upsert-many/success",
    SAVE_UPSERT_MANY_ERROR: "@ngrx/data/save/upsert-many/error",
    // Use only if the server supports upsert;
    SAVE_UPSERT_ONE: "@ngrx/data/save/upsert-one",
    SAVE_UPSERT_ONE_SUCCESS: "@ngrx/data/save/upsert-one/success",
    SAVE_UPSERT_ONE_ERROR: "@ngrx/data/save/upsert-one/error",
    // Cache operations
    ADD_ALL: "@ngrx/data/add-all",
    ADD_MANY: "@ngrx/data/add-many",
    ADD_ONE: "@ngrx/data/add-one",
    REMOVE_ALL: "@ngrx/data/remove-all",
    REMOVE_MANY: "@ngrx/data/remove-many",
    REMOVE_ONE: "@ngrx/data/remove-one",
    UPDATE_MANY: "@ngrx/data/update-many",
    UPDATE_ONE: "@ngrx/data/update-one",
    UPSERT_MANY: "@ngrx/data/upsert-many",
    UPSERT_ONE: "@ngrx/data/upsert-one",
    COMMIT_ALL: "@ngrx/data/commit-all",
    COMMIT_MANY: "@ngrx/data/commit-many",
    COMMIT_ONE: "@ngrx/data/commit-one",
    UNDO_ALL: "@ngrx/data/undo-all",
    UNDO_MANY: "@ngrx/data/undo-many",
    UNDO_ONE: "@ngrx/data/undo-one",
    SET_CHANGE_STATE: "@ngrx/data/set-change-state",
    SET_COLLECTION: "@ngrx/data/set-collection",
    SET_FILTER: "@ngrx/data/set-filter",
    SET_LOADED: "@ngrx/data/set-loaded",
    SET_LOADING: "@ngrx/data/set-loading",
};
export { EntityOp };
/**
 * "Success" suffix appended to EntityOps that are successful.
 * @type {?}
 */
export const OP_SUCCESS = '/success';
/**
 * "Error" suffix appended to EntityOps that have failed.
 * @type {?}
 */
export const OP_ERROR = '/error';
/**
 * Make the error EntityOp corresponding to the given EntityOp
 * @param {?} op
 * @return {?}
 */
export function makeErrorOp(op) {
    return (/** @type {?} */ ((op + OP_ERROR)));
}
/**
 * Make the success EntityOp corresponding to the given EntityOp
 * @param {?} op
 * @return {?}
 */
export function makeSuccessOp(op) {
    return (/** @type {?} */ ((op + OP_SUCCESS)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LW9wLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9kYXRhL3NyYy9hY3Rpb25zL2VudGl0eS1vcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUlBLE1BQVksUUFBUTtJQUNsQix5QkFBeUI7SUFDekIsY0FBYyw2QkFBOEI7SUFDNUMsZ0JBQWdCLCtCQUFnQztJQUVoRCxTQUFTLHdCQUF5QjtJQUNsQyxpQkFBaUIsZ0NBQWlDO0lBQ2xELGVBQWUsOEJBQStCO0lBRTlDLFVBQVUseUJBQTBCO0lBQ3BDLGtCQUFrQixpQ0FBa0M7SUFDcEQsZ0JBQWdCLCtCQUFnQztJQUVoRCxVQUFVLHlCQUEwQjtJQUNwQyxrQkFBa0IsaUNBQWtDO0lBQ3BELGdCQUFnQiwrQkFBZ0M7SUFFaEQsWUFBWSwyQkFBNEI7SUFDeEMsb0JBQW9CLG1DQUFvQztJQUN4RCxrQkFBa0IsaUNBQWtDO0lBRXBELGFBQWEsNEJBQTZCO0lBQzFDLG1CQUFtQixrQ0FBbUM7SUFDdEQscUJBQXFCLG9DQUFxQztJQUUxRCxZQUFZLDJCQUE0QjtJQUN4QyxrQkFBa0IsaUNBQWtDO0lBQ3BELG9CQUFvQixtQ0FBb0M7SUFFeEQsZ0JBQWdCLCtCQUFnQztJQUNoRCx3QkFBd0IsdUNBQXdDO0lBQ2hFLHNCQUFzQixxQ0FBc0M7SUFFNUQsZUFBZSw4QkFBK0I7SUFDOUMsdUJBQXVCLHNDQUF1QztJQUM5RCxxQkFBcUIsb0NBQXFDO0lBRTFELGdCQUFnQiwrQkFBZ0M7SUFDaEQsd0JBQXdCLHVDQUF3QztJQUNoRSxzQkFBc0IscUNBQXNDO0lBRTVELGVBQWUsOEJBQStCO0lBQzlDLHVCQUF1QixzQ0FBdUM7SUFDOUQscUJBQXFCLG9DQUFxQztJQUUxRCwwQ0FBMEM7SUFDMUMsZ0JBQWdCLCtCQUFnQztJQUNoRCx3QkFBd0IsdUNBQXdDO0lBQ2hFLHNCQUFzQixxQ0FBc0M7SUFFNUQsMENBQTBDO0lBQzFDLGVBQWUsOEJBQStCO0lBQzlDLHVCQUF1QixzQ0FBdUM7SUFDOUQscUJBQXFCLG9DQUFxQztJQUUxRCxtQkFBbUI7SUFDbkIsT0FBTyxzQkFBdUI7SUFDOUIsUUFBUSx1QkFBd0I7SUFDaEMsT0FBTyxzQkFBdUI7SUFDOUIsVUFBVSx5QkFBMEI7SUFDcEMsV0FBVywwQkFBMkI7SUFDdEMsVUFBVSx5QkFBMEI7SUFDcEMsV0FBVywwQkFBMkI7SUFDdEMsVUFBVSx5QkFBMEI7SUFDcEMsV0FBVywwQkFBMkI7SUFDdEMsVUFBVSx5QkFBMEI7SUFFcEMsVUFBVSx5QkFBMEI7SUFDcEMsV0FBVywwQkFBMkI7SUFDdEMsVUFBVSx5QkFBMEI7SUFDcEMsUUFBUSx1QkFBd0I7SUFDaEMsU0FBUyx3QkFBeUI7SUFDbEMsUUFBUSx1QkFBd0I7SUFFaEMsZ0JBQWdCLCtCQUFnQztJQUNoRCxjQUFjLDZCQUE4QjtJQUM1QyxVQUFVLHlCQUEwQjtJQUNwQyxVQUFVLHlCQUEwQjtJQUNwQyxXQUFXLDBCQUEyQjtFQUN2Qzs7Ozs7O0FBR0QsTUFBTSxPQUFPLFVBQVUsR0FBRyxVQUFVOzs7OztBQUdwQyxNQUFNLE9BQU8sUUFBUSxHQUFHLFFBQVE7Ozs7OztBQUdoQyxNQUFNLFVBQVUsV0FBVyxDQUFDLEVBQVk7SUFDdEMsT0FBTyxtQkFBVSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBQSxDQUFDO0FBQ25DLENBQUM7Ozs7OztBQUdELE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBWTtJQUN4QyxPQUFPLG1CQUFVLENBQUMsRUFBRSxHQUFHLFVBQVUsQ0FBQyxFQUFBLENBQUM7QUFDckMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEVuc3VyZSB0aGF0IHRoZXNlIHN1ZmZpeCB2YWx1ZXMgYW5kIHRoZSBFbnRpdHlPcCBzdWZmaXhlcyBtYXRjaFxuLy8gQ2Fubm90IGRvIHRoYXQgcHJvZ3JhbW1hdGljYWxseS5cblxuLyoqIEdlbmVyYWwgcHVycG9zZSBlbnRpdHkgYWN0aW9uIG9wZXJhdGlvbnMsIGdvb2QgZm9yIGFueSBlbnRpdHkgdHlwZSAqL1xuZXhwb3J0IGVudW0gRW50aXR5T3Age1xuICAvLyBQZXJzaXN0YW5jZSBvcGVyYXRpb25zXG4gIENBTkNFTF9QRVJTSVNUID0gJ0BuZ3J4L2RhdGEvY2FuY2VsLXBlcnNpc3QnLFxuICBDQU5DRUxFRF9QRVJTSVNUID0gJ0BuZ3J4L2RhdGEvY2FuY2VsZWQtcGVyc2lzdCcsXG5cbiAgUVVFUllfQUxMID0gJ0BuZ3J4L2RhdGEvcXVlcnktYWxsJyxcbiAgUVVFUllfQUxMX1NVQ0NFU1MgPSAnQG5ncngvZGF0YS9xdWVyeS1hbGwvc3VjY2VzcycsXG4gIFFVRVJZX0FMTF9FUlJPUiA9ICdAbmdyeC9kYXRhL3F1ZXJ5LWFsbC9lcnJvcicsXG5cbiAgUVVFUllfTE9BRCA9ICdAbmdyeC9kYXRhL3F1ZXJ5LWxvYWQnLFxuICBRVUVSWV9MT0FEX1NVQ0NFU1MgPSAnQG5ncngvZGF0YS9xdWVyeS1sb2FkL3N1Y2Nlc3MnLFxuICBRVUVSWV9MT0FEX0VSUk9SID0gJ0BuZ3J4L2RhdGEvcXVlcnktbG9hZC9lcnJvcicsXG5cbiAgUVVFUllfTUFOWSA9ICdAbmdyeC9kYXRhL3F1ZXJ5LW1hbnknLFxuICBRVUVSWV9NQU5ZX1NVQ0NFU1MgPSAnQG5ncngvZGF0YS9xdWVyeS1tYW55L3N1Y2Nlc3MnLFxuICBRVUVSWV9NQU5ZX0VSUk9SID0gJ0BuZ3J4L2RhdGEvcXVlcnktbWFueS9lcnJvcicsXG5cbiAgUVVFUllfQllfS0VZID0gJ0BuZ3J4L2RhdGEvcXVlcnktYnkta2V5JyxcbiAgUVVFUllfQllfS0VZX1NVQ0NFU1MgPSAnQG5ncngvZGF0YS9xdWVyeS1ieS1rZXkvc3VjY2VzcycsXG4gIFFVRVJZX0JZX0tFWV9FUlJPUiA9ICdAbmdyeC9kYXRhL3F1ZXJ5LWJ5LWtleS9lcnJvcicsXG5cbiAgU0FWRV9BRERfTUFOWSA9ICdAbmdyeC9kYXRhL3NhdmUvYWRkLW1hbnknLFxuICBTQVZFX0FERF9NQU5ZX0VSUk9SID0gJ0BuZ3J4L2RhdGEvc2F2ZS9hZGQtbWFueS9lcnJvcicsXG4gIFNBVkVfQUREX01BTllfU1VDQ0VTUyA9ICdAbmdyeC9kYXRhL3NhdmUvYWRkLW1hbnkvc3VjY2VzcycsXG5cbiAgU0FWRV9BRERfT05FID0gJ0BuZ3J4L2RhdGEvc2F2ZS9hZGQtb25lJyxcbiAgU0FWRV9BRERfT05FX0VSUk9SID0gJ0BuZ3J4L2RhdGEvc2F2ZS9hZGQtb25lL2Vycm9yJyxcbiAgU0FWRV9BRERfT05FX1NVQ0NFU1MgPSAnQG5ncngvZGF0YS9zYXZlL2FkZC1vbmUvc3VjY2VzcycsXG5cbiAgU0FWRV9ERUxFVEVfTUFOWSA9ICdAbmdyeC9kYXRhL3NhdmUvZGVsZXRlLW1hbnknLFxuICBTQVZFX0RFTEVURV9NQU5ZX1NVQ0NFU1MgPSAnQG5ncngvZGF0YS9zYXZlL2RlbGV0ZS1tYW55L3N1Y2Nlc3MnLFxuICBTQVZFX0RFTEVURV9NQU5ZX0VSUk9SID0gJ0BuZ3J4L2RhdGEvc2F2ZS9kZWxldGUtbWFueS9lcnJvcicsXG5cbiAgU0FWRV9ERUxFVEVfT05FID0gJ0BuZ3J4L2RhdGEvc2F2ZS9kZWxldGUtb25lJyxcbiAgU0FWRV9ERUxFVEVfT05FX1NVQ0NFU1MgPSAnQG5ncngvZGF0YS9zYXZlL2RlbGV0ZS1vbmUvc3VjY2VzcycsXG4gIFNBVkVfREVMRVRFX09ORV9FUlJPUiA9ICdAbmdyeC9kYXRhL3NhdmUvZGVsZXRlLW9uZS9lcnJvcicsXG5cbiAgU0FWRV9VUERBVEVfTUFOWSA9ICdAbmdyeC9kYXRhL3NhdmUvdXBkYXRlLW1hbnknLFxuICBTQVZFX1VQREFURV9NQU5ZX1NVQ0NFU1MgPSAnQG5ncngvZGF0YS9zYXZlL3VwZGF0ZS1tYW55L3N1Y2Nlc3MnLFxuICBTQVZFX1VQREFURV9NQU5ZX0VSUk9SID0gJ0BuZ3J4L2RhdGEvc2F2ZS91cGRhdGUtbWFueS9lcnJvcicsXG5cbiAgU0FWRV9VUERBVEVfT05FID0gJ0BuZ3J4L2RhdGEvc2F2ZS91cGRhdGUtb25lJyxcbiAgU0FWRV9VUERBVEVfT05FX1NVQ0NFU1MgPSAnQG5ncngvZGF0YS9zYXZlL3VwZGF0ZS1vbmUvc3VjY2VzcycsXG4gIFNBVkVfVVBEQVRFX09ORV9FUlJPUiA9ICdAbmdyeC9kYXRhL3NhdmUvdXBkYXRlLW9uZS9lcnJvcicsXG5cbiAgLy8gVXNlIG9ubHkgaWYgdGhlIHNlcnZlciBzdXBwb3J0cyB1cHNlcnQ7XG4gIFNBVkVfVVBTRVJUX01BTlkgPSAnQG5ncngvZGF0YS9zYXZlL3Vwc2VydC1tYW55JyxcbiAgU0FWRV9VUFNFUlRfTUFOWV9TVUNDRVNTID0gJ0BuZ3J4L2RhdGEvc2F2ZS91cHNlcnQtbWFueS9zdWNjZXNzJyxcbiAgU0FWRV9VUFNFUlRfTUFOWV9FUlJPUiA9ICdAbmdyeC9kYXRhL3NhdmUvdXBzZXJ0LW1hbnkvZXJyb3InLFxuXG4gIC8vIFVzZSBvbmx5IGlmIHRoZSBzZXJ2ZXIgc3VwcG9ydHMgdXBzZXJ0O1xuICBTQVZFX1VQU0VSVF9PTkUgPSAnQG5ncngvZGF0YS9zYXZlL3Vwc2VydC1vbmUnLFxuICBTQVZFX1VQU0VSVF9PTkVfU1VDQ0VTUyA9ICdAbmdyeC9kYXRhL3NhdmUvdXBzZXJ0LW9uZS9zdWNjZXNzJyxcbiAgU0FWRV9VUFNFUlRfT05FX0VSUk9SID0gJ0BuZ3J4L2RhdGEvc2F2ZS91cHNlcnQtb25lL2Vycm9yJyxcblxuICAvLyBDYWNoZSBvcGVyYXRpb25zXG4gIEFERF9BTEwgPSAnQG5ncngvZGF0YS9hZGQtYWxsJyxcbiAgQUREX01BTlkgPSAnQG5ncngvZGF0YS9hZGQtbWFueScsXG4gIEFERF9PTkUgPSAnQG5ncngvZGF0YS9hZGQtb25lJyxcbiAgUkVNT1ZFX0FMTCA9ICdAbmdyeC9kYXRhL3JlbW92ZS1hbGwnLFxuICBSRU1PVkVfTUFOWSA9ICdAbmdyeC9kYXRhL3JlbW92ZS1tYW55JyxcbiAgUkVNT1ZFX09ORSA9ICdAbmdyeC9kYXRhL3JlbW92ZS1vbmUnLFxuICBVUERBVEVfTUFOWSA9ICdAbmdyeC9kYXRhL3VwZGF0ZS1tYW55JyxcbiAgVVBEQVRFX09ORSA9ICdAbmdyeC9kYXRhL3VwZGF0ZS1vbmUnLFxuICBVUFNFUlRfTUFOWSA9ICdAbmdyeC9kYXRhL3Vwc2VydC1tYW55JyxcbiAgVVBTRVJUX09ORSA9ICdAbmdyeC9kYXRhL3Vwc2VydC1vbmUnLFxuXG4gIENPTU1JVF9BTEwgPSAnQG5ncngvZGF0YS9jb21taXQtYWxsJyxcbiAgQ09NTUlUX01BTlkgPSAnQG5ncngvZGF0YS9jb21taXQtbWFueScsXG4gIENPTU1JVF9PTkUgPSAnQG5ncngvZGF0YS9jb21taXQtb25lJyxcbiAgVU5ET19BTEwgPSAnQG5ncngvZGF0YS91bmRvLWFsbCcsXG4gIFVORE9fTUFOWSA9ICdAbmdyeC9kYXRhL3VuZG8tbWFueScsXG4gIFVORE9fT05FID0gJ0BuZ3J4L2RhdGEvdW5kby1vbmUnLFxuXG4gIFNFVF9DSEFOR0VfU1RBVEUgPSAnQG5ncngvZGF0YS9zZXQtY2hhbmdlLXN0YXRlJyxcbiAgU0VUX0NPTExFQ1RJT04gPSAnQG5ncngvZGF0YS9zZXQtY29sbGVjdGlvbicsXG4gIFNFVF9GSUxURVIgPSAnQG5ncngvZGF0YS9zZXQtZmlsdGVyJyxcbiAgU0VUX0xPQURFRCA9ICdAbmdyeC9kYXRhL3NldC1sb2FkZWQnLFxuICBTRVRfTE9BRElORyA9ICdAbmdyeC9kYXRhL3NldC1sb2FkaW5nJyxcbn1cblxuLyoqIFwiU3VjY2Vzc1wiIHN1ZmZpeCBhcHBlbmRlZCB0byBFbnRpdHlPcHMgdGhhdCBhcmUgc3VjY2Vzc2Z1bC4qL1xuZXhwb3J0IGNvbnN0IE9QX1NVQ0NFU1MgPSAnL3N1Y2Nlc3MnO1xuXG4vKiogXCJFcnJvclwiIHN1ZmZpeCBhcHBlbmRlZCB0byBFbnRpdHlPcHMgdGhhdCBoYXZlIGZhaWxlZC4qL1xuZXhwb3J0IGNvbnN0IE9QX0VSUk9SID0gJy9lcnJvcic7XG5cbi8qKiBNYWtlIHRoZSBlcnJvciBFbnRpdHlPcCBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBFbnRpdHlPcCAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VFcnJvck9wKG9wOiBFbnRpdHlPcCk6IEVudGl0eU9wIHtcbiAgcmV0dXJuIDxFbnRpdHlPcD4ob3AgKyBPUF9FUlJPUik7XG59XG5cbi8qKiBNYWtlIHRoZSBzdWNjZXNzIEVudGl0eU9wIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIEVudGl0eU9wICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZVN1Y2Nlc3NPcChvcDogRW50aXR5T3ApOiBFbnRpdHlPcCB7XG4gIHJldHVybiA8RW50aXR5T3A+KG9wICsgT1BfU1VDQ0VTUyk7XG59XG4iXX0=